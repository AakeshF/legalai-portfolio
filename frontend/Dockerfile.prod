# Production Dockerfile for Legal AI Frontend
# Multi-stage build for optimized production image

# Stage 1: Build the application
FROM node:20-alpine as builder

# Install dependencies for node-gyp
RUN apk add --no-cache python3 py3-pip make g++

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install ALL dependencies (need dev deps for build)
RUN npm install

# Copy source code
COPY . .

# Build the application
ENV NODE_ENV=production
RUN npm run build

# Stage 2: Production image with nginx
FROM nginx:alpine

# Copy custom nginx config
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Add non-root user
RUN adduser -D -g 'www' www && \
    chown -R www:www /usr/share/nginx/html && \
    chown -R www:www /var/cache/nginx && \
    chown -R www:www /var/log/nginx && \
    chown -R www:www /etc/nginx/conf.d
    
# Create runtime directories with proper permissions
RUN touch /var/run/nginx.pid && \
    chown -R www:www /var/run/nginx.pid

# Switch to non-root user
USER www

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]