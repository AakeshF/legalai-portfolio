name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: legalai
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: legalai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8 mypy
    
    - name: Create test environment file
      run: |
        cd backend
        cat > .env.test << EOF
        DATABASE_URL=postgresql://legalai:testpass@localhost:5432/legalai_test
        REDIS_URL=redis://localhost:6379
        DEEPSEEK_API_KEY=test-api-key
        JWT_SECRET_KEY=test-jwt-secret-key-minimum-32-chars
        SECRET_KEY=test-secret-key-minimum-32-chars-long
        ENCRYPTION_KEY=Kp3s6v9y$B&E)H@MbQeThWmZq4t7w!z%C*F-JaNdRfUjXn2r5u8x/A?D(G+KbPeS
        DISABLE_AUTH=false
        DEBUG=false
        EOF
    
    - name: Run linting
      run: |
        cd backend
        black --check .
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run type checking
      run: |
        cd backend
        mypy . --ignore-missing-imports || true
    
    - name: Run tests
      run: |
        cd backend
        pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term
      env:
        DATABASE_URL: postgresql://legalai:testpass@localhost:5432/legalai_test
        REDIS_URL: redis://localhost:6379
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Check coverage threshold
      run: |
        cd backend
        coverage report --fail-under=70  # Starting at 70%, target 80%

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint || true  # Don't fail on lint warnings initially
    
    - name: Run type checking
      run: |
        cd frontend
        npm run type-check || true  # Don't fail on type errors initially
    
    - name: Run tests
      run: |
        cd frontend
        npm run test:ci || npm test || true  # Fallback if test:ci not configured
    
    - name: Build application
      run: |
        cd frontend
        npm run build
      env:
        VITE_API_URL: http://localhost:8000
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Check Python dependencies
      run: |
        cd backend
        pip install safety
        safety check -r requirements.txt || true
    
    - name: Check npm dependencies
      run: |
        cd frontend
        npm audit --audit-level=high || true

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: legalai-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: legalai-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Start services
      run: |
        docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
        sleep 10  # Wait for services to start
    
    - name: Check service health
      run: |
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:3000 || exit 1
    
    - name: Run integration tests
      run: |
        # Add integration test commands here
        echo "Integration tests would run here"
    
    - name: Stop services
      if: always()
      run: |
        docker-compose down -v