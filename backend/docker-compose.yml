# docker-compose.yml - Docker Compose configuration for development and production
version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: legal-ai-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-legalai}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-legalai123}
      POSTGRES_DB: ${POSTGRES_DB:-legalai}
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
      - ./migrations/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-legalai}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: legal-ai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Legal AI Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: legal-ai-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-legalai}:${POSTGRES_PASSWORD:-legalai123}@postgres:5432/${POSTGRES_DB:-legalai}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      
      # API Keys
      DEEPSEEK_API_KEY: ${DEEPSEEK_API_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-secret-key-here}
      
      # Application settings
      ENVIRONMENT: ${ENVIRONMENT:-production}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FORMAT: json
      
      # CORS
      CORS_ORIGINS: ${CORS_ORIGINS:-["http://localhost:3000"]}
      
      # File upload
      UPLOAD_MAX_SIZE_MB: ${UPLOAD_MAX_SIZE_MB:-50}
      UPLOAD_DIRECTORY: /app/uploads
      
      # Workers
      WEB_CONCURRENCY: ${WEB_CONCURRENCY:-4}
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx reverse proxy (optional, for production)
  nginx:
    image: nginx:alpine
    container_name: legal-ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  default:
    name: legal-ai-network